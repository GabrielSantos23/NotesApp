{
  "id": "note_1753923508274",
  "title": "Untitled Note",
  "content": "<p>i closed the sidebar and refrash the page and after that the sidebar reappers opened, the state are not being saved\nconst [isCollapsed, setIsCollapsed] = useState(false);\nonCollapsedChange={(collapsed) =&amp;gt; setIsCollapsed(collapsed)}\nonCollapsedChange\nimport * as React from \"react\";<br>import { Slot } from \"@radix-ui/react-slot\";<br>import { cva, type VariantProps } from \"class-variance-authority\";<br>import { PanelLeftIcon } from \"lucide-react\";</p><p>import { useIsMobile } from \"@/hooks/use-mobile\";<br>import { cn } from \"@/lib/utils\";<br>import { Button } from \"@/components/ui/button\";<br>import { Input } from \"@/components/ui/input\";<br>import { Separator } from \"@/components/ui/separator\";<br>import {<br>Sheet,<br>SheetContent,<br>SheetDescription,<br>SheetHeader,<br>SheetTitle,<br>} from \"@/components/ui/sheet\";<br>import { Skeleton } from \"@/components/ui/skeleton\";<br>import {<br>Tooltip,<br>TooltipContent,<br>TooltipProvider,<br>TooltipTrigger,<br>} from \"@/components/ui/tooltip\";</p><p>const SIDEBAR_COOKIE_NAME = \"sidebar_state\";<br>const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;<br>const SIDEBAR_WIDTH = \"16rem\";<br>const SIDEBAR_WIDTH_MOBILE = \"18rem\";<br>const SIDEBAR_WIDTH_ICON = \"3rem\";<br>const SIDEBAR_KEYBOARD_SHORTCUT = \"b\";</p><p>type SidebarContextProps = {<br>state: \"expanded\" | \"collapsed\";<br>open: boolean;<br>setOpen: (open: boolean) =&gt; void;<br>openMobile: boolean;<br>setOpenMobile: (open: boolean) =&gt; void;<br>isMobile: boolean;<br>toggleSidebar: () =&gt; void;<br>};</p><p>const SidebarContext = React.createContext&lt;SidebarContextProps | null&gt;(null);</p><p>function useSidebar() {<br>const context = React.useContext(SidebarContext);<br>if (!context) {<br>throw new Error(\"useSidebar must be used within a SidebarProvider.\");<br>}</p><p>return context;<br>}</p><p>function SidebarProvider({<br>defaultOpen = true,<br>open: openProp,<br>onOpenChange: setOpenProp,<br>className,<br>style,<br>children,<br>...props<br>}: React.ComponentProps&lt;\"div\"&gt; &amp; {<br>defaultOpen?: boolean;<br>open?: boolean;<br>onOpenChange?: (open: boolean) =&gt; void;<br>}) {<br>const isMobile = useIsMobile();<br>const [openMobile, setOpenMobile] = React.useState(false);</p><p>// This is the internal state of the sidebar.<br>// We use openProp and setOpenProp for control from outside the component.<br>const [_open, _setOpen] = React.useState(defaultOpen);<br>const open = openProp ?? _open;<br>const setOpen = React.useCallback(<br>(value: boolean | ((value: boolean) =&gt; boolean)) =&gt; {<br>const openState = typeof value === \"function\" ? value(open) : value;<br>if (setOpenProp) {<br>setOpenProp(openState);<br>} else {<br>_setOpen(openState);<br>}</p><pre class=\"rounded-md bg-muted p-4 font-mono text-sm\"><code>  // This sets the cookie to keep the sidebar state.\n  document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n},\n[setOpenProp, open]</code></pre><p>);</p><p>// Helper to toggle the sidebar.<br>const toggleSidebar = React.useCallback(() =&gt; {<br>return isMobile ? setOpenMobile((open) =&gt; !open) : setOpen((open) =&gt; !open);<br>}, [isMobile, setOpen, setOpenMobile]);</p><p>// Adds a keyboard shortcut to toggle the sidebar.<br>React.useEffect(() =&gt; {<br>const handleKeyDown = (event: KeyboardEvent) =&gt; {<br>if (<br>event.key === SIDEBAR_KEYBOARD_SHORTCUT &amp;&amp;<br>(event.metaKey || event.ctrlKey)<br>) {<br>event.preventDefault();<br>toggleSidebar();<br>}<br>};</p><pre class=\"rounded-md bg-muted p-4 font-mono text-sm\"><code>window.addEventListener(\"keydown\", handleKeyDown);\nreturn () =&gt; window.removeEventListener(\"keydown\", handleKeyDown);</code></pre><p>}, [toggleSidebar]);</p><p>// We add a state so that we can do data-state=\"expanded\" or \"collapsed\".<br>// This makes it easier to style the sidebar with Tailwind classes.<br>const state = open ? \"expanded\" : \"collapsed\";</p><p>const contextValue = React.useMemo(<br>() =&gt; ({<br>state,<br>open,<br>setOpen,<br>isMobile,<br>openMobile,<br>setOpenMobile,<br>toggleSidebar,<br>}),<br>[state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]<br>);</p><p>return (<br>&lt;SidebarContext.Provider value={contextValue}&gt;<br><br>&lt;div<br>data-slot=\"sidebar-wrapper\"<br>style={<br>{<br>\"--sidebar-width\": SIDEBAR_WIDTH,<br>\"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,<br>...style,<br>} as React.CSSProperties<br>}<br>className={cn(<br>\"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",<br>className<br>)}<br>{...props}<br>&gt;<br>{children}<br><br><br>&lt;/SidebarContext.Provider&gt;<br>);<br>}</p><p>function Sidebar({<br>side = \"left\",<br>variant = \"sidebar\",<br>collapsible = \"offcanvas\",<br>className,<br>children,<br>...props<br>}: React.ComponentProps&lt;\"div\"&gt; &amp; {<br>side?: \"left\" | \"right\";<br>variant?: \"sidebar\" | \"floating\" | \"inset\";<br>collapsible?: \"offcanvas\" | \"icon\" | \"none\";<br>}) {<br>const { isMobile, state, openMobile, setOpenMobile } = useSidebar();</p><p>if (collapsible === \"none\") {<br>return (<br>&lt;div<br>data-slot=\"sidebar\"<br>className={cn(<br>\"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",<br>className<br>)}<br>{...props}<br>&gt;<br>{children}<br><br>);<br>}</p><p>if (isMobile) {<br>return (<br>&lt;Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}&gt;<br>&lt;SheetContent<br>data-sidebar=\"sidebar\"<br>data-slot=\"sidebar\"<br>data-mobile=\"true\"<br>className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&amp;&gt;button]:hidden\"<br>style={<br>{<br>\"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,<br>} as React.CSSProperties<br>}<br>side={side}<br>&gt;<br><br>Sidebar<br>Displays the mobile sidebar.<br><br></p><p>{children}</p><p><br><br><br>);<br>}</p><p></p><p>return (<br>&lt;div<br>className=\"group peer text-sidebar-foreground hidden md:block\"<br>data-state={state}<br>data-collapsible={state === \"collapsed\" ? collapsible : \"\"}<br>data-variant={variant}<br>data-side={side}<br>data-slot=\"sidebar\"<br>&gt;<br>{/* This is what handles the sidebar gap on desktop <em>/}<br>&lt;div<br>data-slot=\"sidebar-gap\"<br>className={cn(<br>\"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",<br>\"group-data-[collapsible=offcanvas]:w-0\",<br>\"group-data-[side=right]:rotate-180\",<br>variant === \"floating\" || variant === \"inset\"<br>? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"<br>: \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"<br>)}<br>/&gt;<br>&lt;div<br>data-slot=\"sidebar-container\"<br>className={cn(<br>\"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",<br>side === \"left\"<br>? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)</em>-1)]\"<br>: \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",<br>// Adjust the padding for floating and inset variants.<br>variant === \"floating\" || variant === \"inset\"<br>? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"<br>: \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",<br>className<br>)}<br>{...props}<br>&gt;<br></p><p><br>{children}<br></p><p><br><br><br>);<br>}</p><p></p><p>function SidebarTrigger({<br>className,<br>onClick,<br>...props<br>}: React.ComponentProps) {<br>const { toggleSidebar } = useSidebar();</p><p>return (<br>&lt;Button<br>data-sidebar=\"trigger\"<br>data-slot=\"sidebar-trigger\"<br>variant=\"ghost\"<br>size=\"icon\"<br>className={cn(\"size-7\", className)}<br>onClick={(event) =&gt; {<br>onClick?.(event);<br>toggleSidebar();<br>}}<br>{...props}<br>&gt;<br><br>Toggle Sidebar<br><br>);<br>}</p><p>function SidebarRail({ className, ...props }: React.ComponentProps&lt;\"button\"&gt;) {<br>const { toggleSidebar } = useSidebar();</p><p>return (<br>&lt;button<br>data-sidebar=\"rail\"<br>data-slot=\"sidebar-rail\"<br>aria-label=\"Toggle Sidebar\"<br>tabIndex={-1}<br>onClick={toggleSidebar}<br>title=\"Toggle Sidebar\"<br>className={cn(<br>\"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",<br>\"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",<br>\"[[data-side=left][data-state=collapsed]<em>&amp;]:cursor-e-resize [[data-side=right][data-state=collapsed]</em>&amp;]:cursor-w-resize\",<br>\"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",<br>\"[[data-side=left][data-collapsible=offcanvas]<em>&amp;]:-right-2\",<br>\"[[data-side=right][data-collapsible=offcanvas]</em>&amp;]:-left-2\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarInset({ className, ...props }: React.ComponentProps&lt;\"main\"&gt;) {<br>return (<br>&lt;main<br>data-slot=\"sidebar-inset\"<br>className={cn(<br>\"bg-background backdrop-blur-3xl relative flex w-full flex-1 flex-col\",<br>\"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarInput({<br>className,<br>...props<br>}: React.ComponentProps) {<br>return (<br>&lt;Input<br>data-slot=\"sidebar-input\"<br>data-sidebar=\"input\"<br>className={cn(\"bg-background h-8 w-full shadow-none\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarHeader({ className, ...props }: React.ComponentProps&lt;\"div\"&gt;) {<br>return (<br>&lt;div<br>data-slot=\"sidebar-header\"<br>data-sidebar=\"header\"<br>className={cn(\"flex flex-col gap-2 p-2\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarFooter({ className, ...props }: React.ComponentProps&lt;\"div\"&gt;) {<br>return (<br>&lt;div<br>data-slot=\"sidebar-footer\"<br>data-sidebar=\"footer\"<br>className={cn(\"flex flex-col gap-2 p-2\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarSeparator({<br>className,<br>...props<br>}: React.ComponentProps) {<br>return (<br>&lt;Separator<br>data-slot=\"sidebar-separator\"<br>data-sidebar=\"separator\"<br>className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarContent({ className, ...props }: React.ComponentProps&lt;\"div\"&gt;) {<br>return (<br>&lt;div<br>data-slot=\"sidebar-content\"<br>data-sidebar=\"content\"<br>className={cn(<br>\"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarGroup({ className, ...props }: React.ComponentProps&lt;\"div\"&gt;) {<br>return (<br>&lt;div<br>data-slot=\"sidebar-group\"<br>data-sidebar=\"group\"<br>className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarGroupLabel({<br>className,<br>asChild = false,<br>...props<br>}: React.ComponentProps&lt;\"div\"&gt; &amp; { asChild?: boolean }) {<br>const Comp = asChild ? Slot : \"div\";</p><p>return (<br>&lt;Comp<br>data-slot=\"sidebar-group-label\"<br>data-sidebar=\"group-label\"<br>className={cn(<br>\"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&amp;&gt;svg]:size-4 [&amp;&gt;svg]:shrink-0\",<br>\"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarGroupAction({<br>className,<br>asChild = false,<br>...props<br>}: React.ComponentProps&lt;\"button\"&gt; &amp; { asChild?: boolean }) {<br>const Comp = asChild ? Slot : \"button\";</p><p>return (<br>&lt;Comp<br>data-slot=\"sidebar-group-action\"<br>data-sidebar=\"group-action\"<br>className={cn(<br>\"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&amp;&gt;svg]:size-4 [&amp;&gt;svg]:shrink-0\",<br>// Increases the hit area of the button on mobile.<br>\"after:absolute after:-inset-2 md:after:hidden\",<br>\"group-data-[collapsible=icon]:hidden\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarGroupContent({<br>className,<br>...props<br>}: React.ComponentProps&lt;\"div\"&gt;) {<br>return (<br>&lt;div<br>data-slot=\"sidebar-group-content\"<br>data-sidebar=\"group-content\"<br>className={cn(\"w-full text-sm\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarMenu({ className, ...props }: React.ComponentProps&lt;\"ul\"&gt;) {<br>return (<br>&lt;ul<br>data-slot=\"sidebar-menu\"<br>data-sidebar=\"menu\"<br>className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarMenuItem({ className, ...props }: React.ComponentProps&lt;\"li\"&gt;) {<br>return (<br>&lt;li<br>data-slot=\"sidebar-menu-item\"<br>data-sidebar=\"menu-item\"<br>className={cn(\"group/menu-item relative\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>const sidebarMenuButtonVariants = cva(<br>\"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&amp;&gt;span:last-child]:truncate [&amp;&gt;svg]:size-4 [&amp;&gt;svg]:shrink-0\",<br>{<br>variants: {<br>variant: {<br>default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",<br>outline:<br>\"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",<br>},<br>size: {<br>default: \"h-8 text-sm\",<br>sm: \"h-7 text-xs\",<br>lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",<br>},<br>},<br>defaultVariants: {<br>variant: \"default\",<br>size: \"default\",<br>},<br>}<br>);</p><p>function SidebarMenuButton({<br>asChild = false,<br>isActive = false,<br>variant = \"default\",<br>size = \"default\",<br>tooltip,<br>className,<br>...props<br>}: React.ComponentProps&lt;\"button\"&gt; &amp; {<br>asChild?: boolean;<br>isActive?: boolean;<br>tooltip?: string | React.ComponentProps;<br>} &amp; VariantProps) {<br>const Comp = asChild ? Slot : \"button\";<br>const { isMobile, state } = useSidebar();</p><p>const button = (<br>&lt;Comp<br>data-slot=\"sidebar-menu-button\"<br>data-sidebar=\"menu-button\"<br>data-size={size}<br>data-active={isActive}<br>className={cn(sidebarMenuButtonVariants({ variant, size }), className)}<br>{...props}<br>/&gt;<br>);</p><p>if (!tooltip) {<br>return button;<br>}</p><p>if (typeof tooltip === \"string\") {<br>tooltip = {<br>children: tooltip,<br>};<br>}</p><p>return (<br><br>{button}<br>&lt;TooltipContent<br>side=\"right\"<br>align=\"center\"<br>hidden={state !== \"collapsed\" || isMobile}<br>{...tooltip}<br>/&gt;<br><br>);<br>}</p><p>function SidebarMenuAction({<br>className,<br>asChild = false,<br>showOnHover = false,<br>...props<br>}: React.ComponentProps&lt;\"button\"&gt; &amp; {<br>asChild?: boolean;<br>showOnHover?: boolean;<br>}) {<br>const Comp = asChild ? Slot : \"button\";</p><p>return (<br>&lt;Comp<br>data-slot=\"sidebar-menu-action\"<br>data-sidebar=\"menu-action\"<br>className={cn(<br>\"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&amp;&gt;svg]:size-4 [&amp;&gt;svg]:shrink-0\",<br>// Increases the hit area of the button on mobile.<br>\"after:absolute after:-inset-2 md:after:hidden\",<br>\"peer-data-[size=sm]/menu-button:top-1\",<br>\"peer-data-[size=default]/menu-button:top-1.5\",<br>\"peer-data-[size=lg]/menu-button:top-2.5\",<br>\"group-data-[collapsible=icon]:hidden\",<br>showOnHover &amp;&amp;<br>\"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarMenuBadge({<br>className,<br>...props<br>}: React.ComponentProps&lt;\"div\"&gt;) {<br>return (<br>&lt;div<br>data-slot=\"sidebar-menu-badge\"<br>data-sidebar=\"menu-badge\"<br>className={cn(<br>\"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",<br>\"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",<br>\"peer-data-[size=sm]/menu-button:top-1\",<br>\"peer-data-[size=default]/menu-button:top-1.5\",<br>\"peer-data-[size=lg]/menu-button:top-2.5\",<br>\"group-data-[collapsible=icon]:hidden\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarMenuSkeleton({<br>className,<br>showIcon = false,<br>...props<br>}: React.ComponentProps&lt;\"div\"&gt; &amp; {<br>showIcon?: boolean;<br>}) {<br>// Random width between 50 to 90%.<br>const width = React.useMemo(() =&gt; {<br>return <code class=\"rounded bg-muted px-1.5 py-0.5 font-mono text-sm\">${Math.floor(Math.random() * 40) + 50}%</code>;<br>}, []);</p><p>return (<br>&lt;div<br>data-slot=\"sidebar-menu-skeleton\"<br>data-sidebar=\"menu-skeleton\"<br>className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}<br>{...props}<br>&gt;<br>{showIcon &amp;&amp; (<br><br>)}<br>&lt;Skeleton<br>className=\"h-4 max-w-(--skeleton-width) flex-1\"<br>data-sidebar=\"menu-skeleton-text\"<br>style={<br>{<br>\"--skeleton-width\": width,<br>} as React.CSSProperties<br>}<br>/&gt;<br><br>);<br>}</p><p>function SidebarMenuSub({ className, ...props }: React.ComponentProps&lt;\"ul\"&gt;) {<br>return (<br>&lt;ul<br>data-slot=\"sidebar-menu-sub\"<br>data-sidebar=\"menu-sub\"<br>className={cn(<br>\"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",<br>\"group-data-[collapsible=icon]:hidden\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarMenuSubItem({<br>className,<br>...props<br>}: React.ComponentProps&lt;\"li\"&gt;) {<br>return (<br>&lt;li<br>data-slot=\"sidebar-menu-sub-item\"<br>data-sidebar=\"menu-sub-item\"<br>className={cn(\"group/menu-sub-item relative\", className)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>function SidebarMenuSubButton({<br>asChild = false,<br>size = \"md\",<br>isActive = false,<br>className,<br>...props<br>}: React.ComponentProps&lt;\"a\"&gt; &amp; {<br>asChild?: boolean;<br>size?: \"sm\" | \"md\";<br>isActive?: boolean;<br>}) {<br>const Comp = asChild ? Slot : \"a\";</p><p>return (<br>&lt;Comp<br>data-slot=\"sidebar-menu-sub-button\"<br>data-sidebar=\"menu-sub-button\"<br>data-size={size}<br>data-active={isActive}<br>className={cn(<br>\"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&amp;&gt;svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&amp;&gt;span:last-child]:truncate [&amp;&gt;svg]:size-4 [&amp;&gt;svg]:shrink-0\",<br>\"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",<br>size === \"sm\" &amp;&amp; \"text-xs\",<br>size === \"md\" &amp;&amp; \"text-sm\",<br>\"group-data-[collapsible=icon]:hidden\",<br>className<br>)}<br>{...props}<br>/&gt;<br>);<br>}</p><p>export {<br>Sidebar,<br>SidebarContent,<br>SidebarFooter,<br>SidebarGroup,<br>SidebarGroupAction,<br>SidebarGroupContent,<br>SidebarGroupLabel,<br>SidebarHeader,<br>SidebarInput,<br>SidebarInset,<br>SidebarMenu,<br>SidebarMenuAction,<br>SidebarMenuBadge,<br>SidebarMenuButton,<br>SidebarMenuItem,<br>SidebarMenuSkeleton,<br>SidebarMenuSub,<br>SidebarMenuSubButton,<br>SidebarMenuSubItem,<br>SidebarProvider,<br>SidebarRail,<br>SidebarSeparator,<br>SidebarTrigger,<br>useSidebar,<br>};\nonOpenChange={(open) =&amp;gt; setIsCollapsed(!open)}\nconst [isCollapsed, setIsCollapsed] = useState(false);\nsetIsCollapsed</p>",
  "links": [],
  "created_at": "2025-07-31T00:58:28.274874200Z",
  "updated_at": "2025-07-31T01:02:16.493080100Z"
}